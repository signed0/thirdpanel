#!/usr/bin/env python

import logging
from operator import itemgetter

from sqlalchemy import func
import pytz

from thirdpanel.feeds import ALL_FEEDS
from thirdpanel.app import db
from thirdpanel.models import Comic, ComicStrip


def _query_comic_last_publish_date():
    q = db.session \
            .query(ComicStrip.comic_id, func.max(ComicStrip.publish_date)) \
            .group_by(ComicStrip.comic_id)
    return dict((r[0], r[1]) for r in q.all())


def _query_comic_guids_since(comic_id, timestamp):
    q = db.session \
            .query(ComicStrip.guid) \
            .filter(ComicStrip.comic_id == comic_id) \
            .filter(ComicStrip.publish_date == timestamp)
    return set(row.guid for row in q.all())


def _comic_last_published(comic_id):
    q = db.session \
            .query(func.max(ComicStrip.publish_date)) \
            .filter(ComicStrip.comic_id == comic_id) \
            .group_by(ComicStrip.comic_id)

    row = q.first()
    if row is None:
        return None

    return row[0].replace(tzinfo=pytz.UTC)


def _comic_ids_by_name():
    q = db.session.query(Comic.id, Comic.name)
    return dict((c.name, c.id) for c in q)


def _comic_names_by_id():
    q = db.session.query(Comic.id, Comic.name)
    return dict((c.id, c.name) for c in q)


def _add_comic_strips(comic_strips):
    if len(comic_strips) == 0:
        return

    # Determine which guids already exist in the database
    guids = tuple(c.guid for c in comic_strips)
    q = db.session \
            .query(ComicStrip.guid) \
            .filter(ComicStrip.guid.in_(guids))
    existing_guids = set(row.guid for row in q.all())

    comic_names_by_id = _comic_names_by_id()

    for comic_strip in comic_strips:
        if comic_strip.guid in existing_guids:
            continue

        comic_name = comic_names_by_id[comic_strip.comic_id]

        _values = (comic_name, comic_strip.number, comic_strip.publish_date)
        logging.info('[%s] new strip %s, published %s"' % _values)

        db.session.add(comic_strip)


def sync_feed(feed, comic_id):
    last_publish_date = _comic_last_published(comic_id)
    if last_publish_date is not None:
        msg = "[%s] last updated: %s" % (feed.name, last_publish_date)
        logging.info(msg)

    current_guids = _query_comic_guids_since(comic_id, last_publish_date)

    new_strips = feed.fetch_items(min_publish_date=last_publish_date,
                                  exclude_guids=current_guids)
    new_strips = sorted(new_strips, key=itemgetter('publish_date'))

    new_comic_strips = []
    for strip_data in new_strips:
        comic_strip = ComicStrip(comic_id=comic_id, **strip_data)
        new_comic_strips.append(comic_strip)

    _add_comic_strips(new_comic_strips)


def sync_all_feeds():
    session = db.session
    comic_ids_by_name = _comic_ids_by_name()

    for FeedClass in ALL_FEEDS:
        feed = FeedClass()
        comic_id = comic_ids_by_name[feed.name]
        try:
            sync_feed(feed, comic_id)
            session.commit()
        except Exception as e:
            logging.error("[%s] Error syncing feed" % feed.name)
            logging.exception(e)
            session.rollback()


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    logging.getLogger("requests").setLevel(logging.WARNING)
    sync_all_feeds()
